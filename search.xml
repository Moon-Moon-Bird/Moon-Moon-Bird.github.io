<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Lucene</title>
    <url>/2019/10/11/Lucene/</url>
    <content><![CDATA[<h1 id="一-什么是全文检索"><a href="#一-什么是全文检索" class="headerlink" title="一.什么是全文检索"></a>一.什么是全文检索</h1><h2 id="1-数据的分类"><a href="#1-数据的分类" class="headerlink" title="1. 数据的分类"></a>1. 数据的分类</h2><pre><code>1. 结构化数据
    格式固定-长度固定-数据类型固定
    如数据库中的数据

2. 非结构化数据
    word文档-pdf文档-邮件-html
    格式不固定-长度不固定-数据类型不固定</code></pre><h2 id="2-数据的查询"><a href="#2-数据的查询" class="headerlink" title="2.数据的查询"></a>2.数据的查询</h2><pre><code>1.结构化数据的查询
    SQL语句,查询结构化数据的方法.简单-速度快

2.非结构化数据的查询
    从文本文件中找出包含特定字符的文件
    1.目测
    2.使用程序把文档读取到内存中,然后匹配字符串,顺序扫描
    3.把非结构化数据变成结构化数据
        先根据空格进行字符串拆分,得到一个单词列表,基于单词列表创建一个索引
        然后查询索引,根据单词和文档的对应关系找到文档列表,这个过程叫全文检索

        索引:为了提高查询速度,创建某种数据结构的集合.</code></pre><a id="more"></a><h2 id="3-全文检索概念"><a href="#3-全文检索概念" class="headerlink" title="3.全文检索概念"></a>3.全文检索概念</h2><pre><code>先创建索引,然后查询索引的过程叫做全文检索
索引一次创建可以多次使用,每次查询速度都很快</code></pre><h1 id="二-全文检索的应用场景"><a href="#二-全文检索的应用场景" class="headerlink" title="二.全文检索的应用场景"></a>二.全文检索的应用场景</h1><h2 id="1-搜索引擎"><a href="#1-搜索引擎" class="headerlink" title="1.搜索引擎"></a>1.搜索引擎</h2><pre><code>百度.360.搜狗.谷歌等</code></pre><h2 id="2-站内搜索"><a href="#2-站内搜索" class="headerlink" title="2.站内搜索"></a>2.站内搜索</h2><pre><code>论坛搜索.微博搜索.贴吧搜索</code></pre><h2 id="3-电商搜索"><a href="#3-电商搜索" class="headerlink" title="3.电商搜索"></a>3.电商搜索</h2><pre><code>淘宝.京东.拼多多</code></pre><h2 id="4-只要有搜索的地方-就可以使用全文检索技术"><a href="#4-只要有搜索的地方-就可以使用全文检索技术" class="headerlink" title="4.只要有搜索的地方,就可以使用全文检索技术"></a>4.只要有搜索的地方,就可以使用全文检索技术</h2><h1 id="三-什么是Lucene"><a href="#三-什么是Lucene" class="headerlink" title="三.什么是Lucene"></a>三.什么是Lucene</h1><p>Lucene是一个基于Java开发全文检索工具包</p>
<h1 id="四-Lucene实现全文检索的流程"><a href="#四-Lucene实现全文检索的流程" class="headerlink" title="四.Lucene实现全文检索的流程"></a>四.Lucene实现全文检索的流程</h1><p>流程图:</p>
<p><img src="/imgages/Lucene/1.png" alt></p>
<h2 id="1-创建索引"><a href="#1-创建索引" class="headerlink" title="1.创建索引"></a>1.创建索引</h2><pre><code>1.获得文档
    原始文档:要基于哪些数据来进行搜索,那这些数据就是原始文档
    搜索引擎:使用爬虫获得原始文档
    站内搜索:数据库中的数据
2.构建文档对象
    对应每个原始文档创建一个Document对象
    每个文档都有一个唯一的编号 文档id</code></pre><p><img src="../img/2.png" alt></p>
<pre><code>3.分析文档
    就是分词的过程
    1.根据空格进行字符串拆分
    2.把单词统一换成小写
    3.去除标点符号
    4.去除停用词
        停用词:无意义的词
    每个关键词都封装成一个term对象
        term中包含两部分内容:
            关键词所在的域
            关键词本身
        不同的域中拆分出来的相同的关键词是不同的Term
4.创建索引
    基于关键词列表创建一个索引.保存到索引库中
    索引库中:
        索引
        Document对象
        关键词和文档的对应关系</code></pre><p><img src="../img/3.png" alt></p>
<pre><code>    注意：创建索引是对语汇单元索引，通过词语找文档，这种索引的结构叫倒排索引结构。
传统方法是根据文件找到该文件的内容，在文件内容中匹配搜索关键字，这种方法是顺序扫描方法，数据量大、搜索慢。 
倒排索引结构是根据内容（词语）找文档，如下图：</code></pre><p><img src="../img/4.png" alt></p>
<pre><code>倒排索引结构也叫反向索引结构，包括索引和文档两部分，索引即词汇表，它的规模较小，而文档集合较大。</code></pre><h2 id="2-查询索引"><a href="#2-查询索引" class="headerlink" title="2.查询索引"></a>2.查询索引</h2><pre><code>1.用户查询接口
    用户输入查询条件的地方
    如:搜索框
2.把关键词封装成一个查询对象
    查询对象:
        要查询的域
        要搜索的关键词
3.执行查询
    根据要查询的关键词到对应的域上进行搜索
    找到关键词,根据关键词找到对应的文档
4.渲染结果
    根据文档的id找到文档对象
    对关键词进行高亮显示
    分页处理
    最终展示结果</code></pre><h1 id="五-入门程序"><a href="#五-入门程序" class="headerlink" title="五.入门程序"></a>五.入门程序</h1><h2 id="1-创建索引-1"><a href="#1-创建索引-1" class="headerlink" title="1.创建索引"></a>1.创建索引</h2><pre><code>环境:
    下载Lucene.https://lucene.apache.org/
    最低jdk1.8

工程搭建:
    创建一个java工程
    添加jar:
        lucene-analyzers-common-7.4.0.jar
        lucene-core-7.4.0.jar
        commons-io.jar

步骤:
    1.创建一个Directory对象,指定索引库保存的位置
    2.基于Directory对象创建一个IndexWriter对象
    3.读取磁盘上的文件,对应每个文件创建一个文档对象
    4.向文档对象中添加域
    5.把文档对象写入索引库
    6.关闭IndexWriter对象</code></pre><p>主要代码:</p>
<pre><code>public class LuceneFirst {

    @Test
    public void createIndex()throws Exception {
        //1.创建一个Directory对象,指定索引库保存的位置
        //把索引库保存在内存中
        //Directory directory = new RAMDirectory();
        //把索引库保存在磁盘中
        Directory directory = FSDirectory.open(new File(&quot;D:\\Homework\\Java\\temp\\index&quot;).toPath());
        //2.基于Directory对象创建一个IndexWriter对象
        IndexWriter indexWriter = new IndexWriter(directory,new IndexWriterConfig());
        //3.读取磁盘上的文件,对应每个文件创建一个文档对象
        File dir = new File(&quot;D:\\Homework\\Java\\searchsource&quot;);
        File[] files = dir.listFiles();
        for (File f : files) {
            //取文件名
            String fileName = f.getName();
            //文件路径
            String filePath = f.getPath();
            //文件的内容
            String fileContent = FileUtils.readFileToString(f, &quot;utf-8&quot;);
            //文件的大小
            long fileSize = FileUtils.sizeOf(f);
            //创建Field
            //参数1:域的名称  参数2:域的值  参数3:是否存储
            Field fieldName = new TextField(&quot;name&quot;,fileName, Field.Store.YES);
            Field fieldpath = new TextField(&quot;path&quot;,filePath, Field.Store.YES);
            Field fieldContent = new TextField(&quot;Content&quot;,fileContent, Field.Store.YES);
            Field fieldSize = new TextField(&quot;Size&quot;,fileSize+&quot;&quot;, Field.Store.YES);

            //创建文档对象
            Document document = new Document();
            //向文本对象添加域
            document.add(fieldName);
            document.add(fieldpath);
            document.add(fieldContent);
            document.add(fieldSize);
            //5.把文档对象写入索引库
            indexWriter.addDocument(document);
        }
        //6.关闭IndexWriter对象
        indexWriter.close();
    }
}</code></pre><h2 id="2-使用luke查看索引库中的内容"><a href="#2-使用luke查看索引库中的内容" class="headerlink" title="2.使用luke查看索引库中的内容"></a>2.使用luke查看索引库中的内容</h2><h2 id="3-查询索引库"><a href="#3-查询索引库" class="headerlink" title="3.查询索引库"></a>3.查询索引库</h2><pre><code>步骤:
    1.创建一个Directory对象,指定索引库的位置
    2.创建一个IndexReader对象
    3.创建一个IndexSearcher对象,构造方法中的参数就是IndexReader
    4.创建一个Query对象,TermQuery
    5.执行查询,得到一个TopDocs对象
    6.取查询结果的总记录数
    7.取文档列表
    8.打印文档中的内容
    9.关闭IndexReader对象</code></pre><p>代码:</p>
<pre><code>@Test
public void searchIndex() throws Exception {
    //1.创建一个Directory对象,指定索引库的位置
    Directory directory = FSDirectory.open(new File(&quot;D:\\Homework\\Java\\temp\\index&quot;).toPath());
    //2.创建一个IndexReader对象
    IndexReader indexReader = DirectoryReader.open(directory);
    //3.创建一个IndexSearcher对象,构造方法中的参数就是IndexReader
    IndexSearcher indexSearcher = new IndexSearcher(indexReader);
    //4.创建一个Query对象,TermQuery
    Query query = new TermQuery(new Term(&quot;content&quot;,&quot;spring&quot;));
    //5.执行查询,得到一个TopDocs对象
    //参数1:查询对象  参数2:查询结果返回的最大纪录数
    TopDocs topDocs = indexSearcher.search(query, 10);
    //6.取查询结果的总记录数
    System.out.println(&quot;总记录数:&quot; + topDocs.totalHits);
    //7.取文档列表
    ScoreDoc[] scoreDocs = topDocs.scoreDocs;
    //8.打印文档中的内容
    for (ScoreDoc scoreDoc : scoreDocs) {
        //取文档id
        int docId = scoreDoc.doc;
        //根据id取文档对象
        Document document = indexSearcher.doc(docId);
        System.out.println(document.get(&quot;name&quot;));
        System.out.println(document.get(&quot;path&quot;));
        System.out.println(document.get(&quot;size&quot;));
        //System.out.println(document.get(&quot;content&quot;));
        System.out.println(&quot;-----------------------------&quot;);
    }
    //9.关闭IndexReader对象
    indexReader.close();
}</code></pre><h1 id="六-分析器"><a href="#六-分析器" class="headerlink" title="六.分析器"></a>六.分析器</h1><p>默认使用的是标准分析器StandardAnalyzer</p>
<h2 id="1-查看分析器的分析效果"><a href="#1-查看分析器的分析效果" class="headerlink" title="1.查看分析器的分析效果"></a>1.查看分析器的分析效果</h2><pre><code>使用Analyzer对象的tokenStream方法返回一个TokenStream对象.此对象包含了最终的分词结果
实现步骤:
    1.创建一个Analyzer对象,StandardAnalyzer对象
    2.使用分析其对象的tokenStream方法返回一个TokenStream对象
    3.向TokenStream设置一个引用,相当于一个指针
    4.调用TokenStream对象的rest方法,如果不调用会抛异常
    5.使用while循环遍历TokenStream对象
    6.关闭TokenStream对象</code></pre><h2 id="2-IKAnalyze的使用方法啊-中文分析器"><a href="#2-IKAnalyze的使用方法啊-中文分析器" class="headerlink" title="2.IKAnalyze的使用方法啊(中文分析器)"></a>2.IKAnalyze的使用方法啊(中文分析器)</h2><pre><code>1.把IKAnalyze的jar包添加到工程
2.把配置文件和扩展词典添加到工程的classpath下
注:扩展词典不可以使用windows记事本编辑,保证扩展词典格式是utf-8
扩展词典:添加一些新词
停用词词典:无意义的词或者是敏感词汇</code></pre><h1 id="七-索引库的维护"><a href="#七-索引库的维护" class="headerlink" title="七.索引库的维护"></a>七.索引库的维护</h1><h2 id="1-Field域的属性"><a href="#1-Field域的属性" class="headerlink" title="1.Field域的属性"></a>1.Field域的属性</h2><pre><code>是否分析：是否对域的内容进行分词处理。前提是我们要对域的内容进行查询。

是否索引：将Field分析后的词或整个Field值进行索引，只有索引方可搜索到。
比如：商品名称、商品简介分析后进行索引，订单号、身份证号不用分析但也要索引，这些将来都要作为查询条件。

是否存储：将Field值存储在文档中，存储在文档中的Field才可以从Document中获取
比如：商品名称、订单号，凡是将来要从Document中获取的Field都要存储。

是否存储的标准：是否要将内容展示给用户</code></pre><p><img src="../img/5.png" alt></p>
<h2 id="2-添加文档代码实现"><a href="#2-添加文档代码实现" class="headerlink" title="2.添加文档代码实现"></a>2.添加文档代码实现</h2><pre><code>public void addDocument() throws Exception {
    //创建一个IndexWriter对象,使用IKAnalyzer作为分析器
    IndexWriter indexWriter = new IndexWriter(FSDirectory.open(new File(&quot;D:\\Homework\\Java\\temp\\index&quot;).toPath()),
            new IndexWriterConfig(new IKAnalyzer()));
    //创建一个Document对象
    Document document = new Document();
    //向document对象添加域
    document.add(new TextField(&quot;name&quot;,&quot;新添加的文件&quot;, Field.Store.YES));
    document.add(new TextField(&quot;content&quot;,&quot;新添加的文件内容&quot;, Field.Store.NO));
    document.add(new StoredField(&quot;path&quot;,&quot;D:\\Homework\\Java\\temp\\kobe&quot;));
    //把文档写入索引库
    indexWriter.addDocument(document);
    //关闭索引库
    indexWriter.close();
}</code></pre><h2 id="3-索引库删除"><a href="#3-索引库删除" class="headerlink" title="3.索引库删除"></a>3.索引库删除</h2><pre><code>public void deleteAllDocument() throws Exception {
    //删除全部文档
    indexWriter.deleteAll();
    //关闭索引库
    indexWriter.close();
}

public void deleteDocumentByQuery() throws Exception {
    //删除名字有apache的文件
    indexWriter.deleteDocuments(new Term(&quot;name&quot;,&quot;apache&quot;));
    indexWriter.close();
}</code></pre><h2 id="4-索引库的修改"><a href="#4-索引库的修改" class="headerlink" title="4.索引库的修改"></a>4.索引库的修改</h2><p>原理:先删除,后添加</p>
<pre><code>public void updateDocument() throws Exception {
    //创建一个新的文档对象
    Document document = new Document();
    //向文档对象添加域
    document.add(new TextField(&quot;name1&quot;,&quot;更新后的文档1&quot;, Field.Store.YES));
    document.add(new TextField(&quot;name2&quot;,&quot;更新后的文档2&quot;, Field.Store.YES));
    document.add(new TextField(&quot;name3&quot;,&quot;更新后的文档3&quot;, Field.Store.YES));
    //更新
    //参数1:要删除的文档  参数2:添加的文档
    indexWriter.updateDocument(new Term(&quot;name&quot;,&quot;spring&quot;),document);
    //关闭索引库
    indexWriter.close();
}</code></pre><h1 id="八-索引库的查询"><a href="#八-索引库的查询" class="headerlink" title="八.索引库的查询"></a>八.索引库的查询</h1><h2 id="1-使用Query的子类"><a href="#1-使用Query的子类" class="headerlink" title="1.使用Query的子类"></a>1.使用Query的子类</h2><pre><code>1.TermQuery
    根据关键词进行查询
    需要指定要查询的域及要查询的关键词

2.RangeQuery</code></pre><p>代码:</p>
<pre><code>public void testRangeQuery() throws Exception {
    //创建一个Query对象
    Query query = LongPoint.newRangeQuery(&quot;size&quot;, 0, 100);
    printResult(query);
}

private void printResult(Query query) throws Exception {
    //执行查询
    TopDocs topDocs = indexSearcher.search(query, 10);
    //遍历
    System.out.println(&quot;总记录数:&quot; + topDocs.totalHits);
    ScoreDoc[] scoreDocs = topDocs.scoreDocs;
    for (ScoreDoc scoreDoc : scoreDocs) {
        int docId = scoreDoc.doc;
        //根据id取文档对象
        Document document = indexSearcher.doc(docId);
        System.out.println(document.get(&quot;name&quot;));
        System.out.println(document.get(&quot;path&quot;));
        System.out.println(document.get(&quot;size&quot;));
        //System.out.println(document.get(&quot;content&quot;));
        System.out.println(&quot;-----------------------------&quot;);
    }
    //9.关闭IndexReader对象
    indexReader.close();
}</code></pre><hr>
<pre><code>3.使用queryparser查询
    可以对要查询的内容先分词,然后基于分词的结果进行查询
    添加jar包
    lucene-queryparser-7.4.0.jar</code></pre><p>代码:</p>
<pre><code>public void testQueryParser() throws Exception {
    //创建一个QueryParser对象
    //参数1:默认搜索域  参数2:分析器对象
    QueryParser queryParser = new QueryParser(&quot;name&quot;,new IKAnalyzer());
    //使用QueryParser对象创建一个Query对象
    Query query = queryParser.parse(&quot;lucene是一个java开发的全文检索工具包&quot;);
    //执行查询
    printResult(query);
}</code></pre>]]></content>
      <categories>
        <category>搜索技术</category>
      </categories>
      <tags>
        <tag>全文检索</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/2019/10/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="换了个博客框架-之前自己做的实在是太丑了-忍不了…会陆续将之前的笔记搬运过来"><a href="#换了个博客框架-之前自己做的实在是太丑了-忍不了…会陆续将之前的笔记搬运过来" class="headerlink" title="换了个博客框架,之前自己做的实在是太丑了,忍不了…会陆续将之前的笔记搬运过来"></a>换了个博客框架,之前自己做的实在是太丑了,忍不了…会陆续将之前的笔记搬运过来</h2>]]></content>
  </entry>
</search>
